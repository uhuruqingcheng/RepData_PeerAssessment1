library(datasets)
data(iris)
?iris
Sepal.Length(iris$virginica)
summary(iris)
tapply(iris,iris$Species,mean)
tapply(iris$Speal.Length,iris$Species,mean)
View(iris)
lapply(split(iris$Speal.Length, iris$Species,mean), mean)
s <- split(iris,iris$Species)
lapply(s,  function(x) colMeans(x[,  "Speal.Length"]))
lapply(iris,  function(x) colMeans(x[,  "Speal.Length"]))
lapply(iris,  function(x) colMeans(x[,  Speal.Length]))
lapply(s,  function(x) colMeans(x[,  Speal.Length]))
lapply(s,  function(x) colMeans(x[,  Sepal.Length]))
lapply(s,  function(x) colMeans(x[,  "Sepal.Length"]))
lapply(s,  function(x) colMeans(x[,  c("Sepal.Length","Sepal.Width")]))
lapply(s,  function(x) mean(x[,  "Sepal.Length"]))
lapply(s$Sepal.Length,mean)
lapply(s,mean)
library(datasets)
data(iris)
s <- split(iris,iris$Species)
lapply(s,  function(x) mean(x[,  "Sepal.Length"]))
apply(iris[, 1:4], 2, mean)
class(apply(iris[,1:4],2,mean))
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
summary(mtcars)
View(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
ave_hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(ave_hp$4 - ave_hp$8)
abs(ave_hp[1] - ave_hp[3])
debug(ls)
ls(y ~ x)
q
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Spcies,mean)
view(iris)
View(iris)
tapply(iris$Sepal.Length, as.factor(iris$Spcies),mean)
tapply(iris[,Sepal.Length], iris$Spcies,mean)
tapply(iris[, "Sepal.Length"], iris$Spcies,mean)
tapply(as.vector(iris[, "Sepal.Length"]), iris$Spcies,mean)
iris$Spcies
tapply(iris$Sepal.Length, iris$Species,mean)
?gm
?gl
0.99*0.001/(0.99*0.001+0.009*0.999)
library(devtools)
find_rtools()
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(rCharts)
library(rCharts)
install.packages(rCharts)
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
?require
data(airqulity)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
detach("package:datasets", unload=TRUE)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.1/library")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
library("UsingR", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
?hist
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
par(mfrow=c(1,1))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
meanChild <- mean(galton$child)
meanChild
hist(galton$child,col="blue",breaks=100)
meanChild <- mean(galton$child)
lines(rep(meanChild,100),seq(0,150,length=100),col="red",lwd=5)
plot(galton$parent,galton$child,pch=19,col="blue")
freqData <- as.data.frame(table(galton$child, galton$parent))
View(freqData)
?table
names(freqData) <- c("child", "parent", "freq")
View(galton)
View(freqData)
plot(as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent", ylab = "child")
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
beta1 <- cor(y, x) *  sd(x) / sd(y)
beta0 <- mean(x) - beta1 * mean(y)
rbind(c(beta0, beta1), coef(lm(x ~ y))
)
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
yn <- (y - mean(y))/sd(y)
xn <- (x - mean(x))/sd(x)
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))[2])
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x),
sd(y) / sd(x) * cor(y, x),
lwd = 3, col = "red")
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x),
sd(y) cor(y, x) / sd(x),
lwd = 3, col = "blue")
abline(mean(y) - mean(x) * sd(y) / sd(x),
sd(y) / sd(x),
lwd = 2)
points(mean(x), mean(y), cex = 2, pch = 19)
abline(mean(y) - mean(x) * cor(y, x) * sd(y) / sd(x),
sd(y) / sd(x) * cor(y, x),
lwd = 3, col = "red")
abline(mean(y) - mean(x) * sd(y) / sd(x) / cor(y, x),
sd(y) cor(y, x) / sd(x),
lwd = 3, col = "blue")
abline(mean(y) - mean(x) * sd(y) / sd(x),
sd(y) / sd(x),
lwd = 2)
points(mean(x), mean(y), cex = 2, pch = 19)
data(mtcars)
names(mtcars)
lm(mpg ~ wt, data = mtcars)
3000 * (-5.344) + 37.285
3 * (-5.344) + 37.285
2 * (-5.344) + 37.285
lm(mpg ~ wt*2, data = mtcars)
lm(mpg ~ I(wt*2), data = mtcars)
fit <- lm(mpg ~ I(wt*2), data = mtcars)
summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit1 <- lm(mpg ~ wt, data = mtcars)
e <- resid(fit)
sum(resid(fit)^2)
fit1 <- lm(mpg ~ wt-1, data = mtcars)
fit1 <- lm(mpg ~ wt, data = mtcars)
sum(resid(fit1)^2)
fit2 <- lm(mpg ~ wt-1, data = mtcars)
sum(resid(fit2)^2)
mean(mtcars$mpg)
sum((mtcars$mpg-mean(mtcars$mpg))^2)
1126/278
library(AppliedPredictiveModeling)
data(concrete)
View(concrete)
library(caret)
library("caret", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("lme4")
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(mixtures)
View(testing)
View(training)
x <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)
rm(x0)
rm(x)
p1 <- qplot(CompressiveStrength, data=training,colour = cut2(FlyAsh))
p1
library("Hmisc", lib.loc="C:/Program Files/R/R-3.1.1/library")
p1
p1 <- qplot(CompressiveStrength,row.names, data=training,colour = cut2(FlyAsh))
p1
p1 <- qplot(row.names,CompressiveStrength, data=training,colour = cut2(FlyAsh))
p1
cutFlyAsh <- cut2(training$FlyAsh,g=5)
table(cutWage)
table(cutFlyAsh)
p1 <- qplot(row.names,CompressiveStrength, data=training,colour = cutFlyAsh)
p1
p1 <- qplot(row.names,CompressiveStrength, data=training,fill = cutFlyAsh,geom=c("boxplot"))
p1
p1 <- qplot(cutFlyAsh,CompressiveStrength, data=training,fill = cutFlyAsh,geom=c("boxplot"))
p1
p2 <- qplot(row.names,CompressiveStrength, data=training)
p2
p2 <- qplot(CompressiveStrength, data=training)
p2
summary(training)
p2 <- qplot(inTrain,CompressiveStrength, data=training)
p2
p2 <- qplot(inTrain,CompressiveStrength, data=training, color = cutFlyAsh)
p2
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
hist(training$SuperPlasticizer,main="",xlab="")
hist(training$Superplasticizer,main="",xlab="")
hist(training$Superplasticizer)
preObj <- preProcess(training,method=c("center","scale"))
preObj
min(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
names(training)
preProc <- preProcess(training[,58:69],method="pca")
preProc
?preProcess
preProc <- preProcess(training[,58:69],method="pca",thresh = 0.8)
preProc$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
trainNew <- training[,c(1,58:69)])
trainNew <- training[,c(1,58:69)]
View(trainNew)
testNew <- testing[,c(1,58:69)]
preProc <- preProcess(trainNew[,-1],method="pca",thresh = 0.8)
trainPC <- predict(preProc,trainNew[,-1])
modelFit <- train(trainNew$diagnosis ~ .,method="glm",data=trainPC)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainNew <- training[,c(1,58:69)]
testNew <- testing[,c(1,58:69)]
preProc <- preProcess(trainNew[,-1],method="pca",thresh = 0.8)
trainPC <- predict(preProc,trainNew[,-1])
modelFit <- train(trainNew$diagnosis ~ .,method="glm",data=trainPC)
install.packages("e1071")
modelFit <- train(trainNew$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,-1])
testPC <- predict(preProc,testNew[,-1])
confusionMatrix(testNew$diagnosis,predict(modelFit,testPC))
predict(modelFit,testPC)
predictionPC <- predict(modelFit,testPC)
mean(testNew$diagnosis == predictionPC)
modelFit2 <- train(trainNew$diagnosis ~ .,method="glm",data=trainNew)
prediction <- predict(modelFit,testNew)
modelFit2 <- train(trainNew$diagnosis ~ .,method="glm",data=trainNew)
prediction <- predict(modelFit2,testNew)
mean(testNew$diagnosis == prediction)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
preProc <- preProcess(training[,58:69],method="pca",thresh = 0.9)
preProc$numComp
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
min(training$Superplasticizer)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
cutFlyAsh <- cut2(training$Age,g=5)
qplot(inTrain,CompressiveStrength, data=training, color = Age)
library(Hmisc)
cutAge <- cut2(training$Age,g=5)
cutFlyAsh <- cut2(training$Age,g=5)
qplot(inTrain,CompressiveStrength, data=training, color = cutAge)
setwd("E:/YunPan(360)/SynchronizeFolder/MyProjects/R/Coursera/5-repdata-005/RepData_PeerAssessment1")
dt <- read.csv("activity.csv")
View(dt)
data.clean<-na.omit(data)
data<-read.csv("activity.csv")
data.clean<-na.omit(data) #no na observations
View(data)
View(data.clean)
date<-levels(as.factor(data_clean$date))
data_clean<-na.omit(data)
date<-levels(as.factor(data_clean$date))
date
sumdata<-aggregate(steps~date, data_clean, sum)
hist(sumdata$steps,main="Total number of steps taken each day",xlab="steps per day")
data_clean$date<-as.Date(data1$date, "%Y-%m-%d")
data_clean$date<-as.Date(data_clean$date, "%Y-%m-%d")
hist(sumdata$steps,main="Total number of steps taken each day",xlab="steps per day")
meanstep=mean(sumdata$steps)
medianstep=median(sumdata$steps)
meanstep
medianstep
sumdata
meanstep = mean(sumdata$steps)
meanstep
View(sumdata)
rm(data.clean)
rm(dt)
View(data)
aggdata1<-aggregate(data_clean,by=list(data_clean$interval),FUN=mean)
View(aggdata1)
View(data_clean)
maxinterval<-aggdata1[which.max(aggdata1$steps),'interval']
maxinterval
sum(is.na(data))
View(data)
sum(is.na(data$steps))
repMeanPerInterval = rep(meanPerInterval,61)
naRows = which(is.na(data), arr.ind=TRUE)[,1]
summary(naRows)
repMeanPerInterval = rep(aggdata1$interval,61)
dataFilled = data
dataFilled$steps[naRows] = repMeanPerInterval[naRows]
View(dataFilled)
View(dataFilled)
View(data)
repMeanPerInterval = rep(aggdata1$steps,61)
dataFilled = data
View(dataFilled)
dataFilled$steps[naRows] = repMeanPerInterval[naRows]
View(dataFilled)
24*12
288*61
install.packages("DMwR")
weekday = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend = c("Saturday", "Sunday")
sumdata_filled$DayType = ifelse(weekdays(sumdata_filled$date) %in% weekday, "weekday", "weekend")
data_filled$DayType = ifelse(weekdays(data_filled$date) %in% weekday, "weekday", "weekend")
data_filled = data
data_filled$steps[naRows] = repMeanPerInterval[naRows]
data_filled$DayType = ifelse(weekdays(data_filled$date) %in% weekday, "weekday", "weekend")
data <- read.csv("activity.csv")
data$date<-as.Date(data$date, "%Y-%m-%d")
naRows = which(is.na(data), arr.ind=TRUE)[,1]
repMeanPerInterval = rep(aggdata1$steps,61)
data_filled = data
data_filled$steps[naRows] = repMeanPerInterval[naRows]
weekday = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend = c("Saturday", "Sunday")
data_filled$DayType = ifelse(weekdays(data_filled$date) %in% weekday, "weekday", "weekend")
tpi = aggregate(steps ~ interval + DayType, data_filled, sum)
head(tpi)
library(lattice)
xyplot(steps ~ interval | DayType, data=tpi, layout=c(1,2), type="l", ylab="Number of steps", xlab="Interval")
library(lattice)
xyplot(steps ~ interval | DayType, data=tpi,  type="l", ylab="Number of steps", xlab="Interval")
summary(tpi)
View(tpi)
View(data_filled)
summary(data_filled$DayType)
sum(data_filled$DayType == "weekend")
sum(data_filled$DayType == "weekday")
?ifelse
xx <- weekdays(data_filled$date)
summary(xx)
head(xx)
weekday = c("星期一", "星期二", "星期三", "星期四", "星期五")
data_filled$DayType = ifelse(weekdays(data_filled$date) %in% weekday, "weekday", "weekend")
tpi = aggregate(steps ~ interval + DayType, data_filled, sum)
View(tpi)
library(lattice)
xyplot(steps ~ interval | DayType, data=tpi, layout=c(1,2), type="l", ylab="Number of steps", xlab="Interval")
is.weekend(weekdays(data_filled$date)[1:7])
library( "chron" )
is.weekend(weekdays(data_filled$date)[1:7])
is.weekend(as.POSIXct(data_filled$date)[1:7])
data_filled$DayType = ifelse(is.weekend(as.POSIXct(data_filled$date)), "weekend", "weekday")
tpi = aggregate(steps ~ interval + DayType, data_filled, sum)
xyplot(steps ~ interval | DayType, data=tpi, layout=c(1,2), type="l", ylab="Number of steps", xlab="Interval")
xyplot(steps ~ interval | DayType, data=tpi, layout=c(1,2), type="l", ylab="Number of steps", xlab="Interval")
