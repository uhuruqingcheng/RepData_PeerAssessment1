library(datasets)
data(iris)
?iris
Sepal.Length(iris$virginica)
summary(iris)
tapply(iris,iris$Species,mean)
tapply(iris$Speal.Length,iris$Species,mean)
View(iris)
lapply(split(iris$Speal.Length, iris$Species,mean), mean)
s <- split(iris,iris$Species)
lapply(s,  function(x) colMeans(x[,  "Speal.Length"]))
lapply(iris,  function(x) colMeans(x[,  "Speal.Length"]))
lapply(iris,  function(x) colMeans(x[,  Speal.Length]))
lapply(s,  function(x) colMeans(x[,  Speal.Length]))
lapply(s,  function(x) colMeans(x[,  Sepal.Length]))
lapply(s,  function(x) colMeans(x[,  "Sepal.Length"]))
lapply(s,  function(x) colMeans(x[,  c("Sepal.Length","Sepal.Width")]))
lapply(s,  function(x) mean(x[,  "Sepal.Length"]))
lapply(s$Sepal.Length,mean)
lapply(s,mean)
library(datasets)
data(iris)
s <- split(iris,iris$Species)
lapply(s,  function(x) mean(x[,  "Sepal.Length"]))
apply(iris[, 1:4], 2, mean)
class(apply(iris[,1:4],2,mean))
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
summary(mtcars)
View(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
ave_hp <- sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(ave_hp$4 - ave_hp$8)
abs(ave_hp[1] - ave_hp[3])
debug(ls)
ls(y ~ x)
q
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Spcies,mean)
view(iris)
View(iris)
tapply(iris$Sepal.Length, as.factor(iris$Spcies),mean)
tapply(iris[,Sepal.Length], iris$Spcies,mean)
tapply(iris[, "Sepal.Length"], iris$Spcies,mean)
tapply(as.vector(iris[, "Sepal.Length"]), iris$Spcies,mean)
iris$Spcies
tapply(iris$Sepal.Length, iris$Species,mean)
?gm
?gl
0.99*0.001/(0.99*0.001+0.009*0.999)
library(devtools)
find_rtools()
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
require(rCharts)
library(rCharts)
install.packages(rCharts)
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
?require
data(airqulity)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d
install.packages(“RMySQL”, type = “source”)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
detach("package:datasets", unload=TRUE)
install.packages("RMySQL", type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
con <- dbConnect(MySQL(), host="127.0.0.1", port= 3306, user="user",
password = "password", dbname="db")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.1/library")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
setwd("E:/YunPan(360)/SynchronizeFolder/MyProjects/R/Coursera/5-repdata-005")
dir()
data <- read.csv("activity.csv")
View(data)
dir()
setwd(.\\RepData_PeerAssessment1)
setwd(".\\RepData_PeerAssessment1")
dir()
dir()
library (lattice)
data1 <- transform(data, Month = factor(date))
data1 <- transform(data, date = factor(date))
View(data1)
histgram(steps | date, data = data1, layout = c(4, 1))
histogram(steps | date, data = data1, layout = c(4, 1))
?histogram
histogram(steps , data = data1)
1100+75*1.645
75*75/100
1100+56.25*1.645
sqrt(75*75/100)
1100+7.5*1.645
0.5^5
0.5^5 + 0.5^4*0.5*5
sqrt(1/12/12/1000)
sqrt(1/12/12/100)
ans <- sqrt(1/12/12/100)
sqrt(ans*ans/1000)
ans <- sqrt(1/12/100)
sqrt(ans*ans/1000)
ans
ppois(10, lambda = 5  *  3)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x);
summary(fit)$coefficients
?resid
e <- resid(fit)
e
sqrt(sum(resid(fit)^2) / (n - 2))
sqrt(sum(resid(fit)^2) / (9 - 2))
data(mtcars)
names(mtcars)
fit1 <- lm(mpg ~ wt,data = mtcars)
summary(fit1)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.95, df = fit$df) * sumCoef[2, 2]
mean(mtcars$mpg)
?mtcars
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
